#!/usr/bin/env node\n\n/**\n * Deployment Verification Script\n * Use this script to verify that your Railway deployment is working correctly\n * \n * Usage:\n *   node scripts/verify-deployment.js [URL]\n *   \n * Example:\n *   node scripts/verify-deployment.js https://your-app.railway.app\n */\n\nconst axios = require('axios');\n\nconst BASE_URL = process.argv[2] || 'http://localhost:5001';\nconst TIMEOUT = 10000; // 10 seconds\n\nconsole.log(`üîç Verifying deployment at: ${BASE_URL}\\n`);\n\n// Test endpoints\nconst tests = [\n  {\n    name: 'Health Check',\n    endpoint: '/health',\n    expectedStatus: 200,\n    validator: (data) => data.status === 'OK' || data.status === 'healthy'\n  },\n  {\n    name: 'Twitter OAuth Status',\n    endpoint: '/api/auth/twitter/config-status',\n    expectedStatus: 200,\n    validator: (data) => data.success === true\n  },\n  {\n    name: 'Frontend (HTML)',\n    endpoint: '/',\n    expectedStatus: 200,\n    validator: (data, headers) => headers['content-type']?.includes('text/html')\n  }\n];\n\nasync function runTest(test) {\n  try {\n    console.log(`üìã Testing: ${test.name}`);\n    \n    const response = await axios.get(`${BASE_URL}${test.endpoint}`, {\n      timeout: TIMEOUT,\n      validateStatus: () => true // Don't throw on non-2xx status\n    });\n    \n    if (response.status !== test.expectedStatus) {\n      console.log(`‚ùå ${test.name}: Expected status ${test.expectedStatus}, got ${response.status}`);\n      return false;\n    }\n    \n    if (test.validator && !test.validator(response.data, response.headers)) {\n      console.log(`‚ùå ${test.name}: Response validation failed`);\n      console.log('Response:', response.data);\n      return false;\n    }\n    \n    console.log(`‚úÖ ${test.name}: OK`);\n    return true;\n    \n  } catch (error) {\n    console.log(`‚ùå ${test.name}: ${error.message}`);\n    return false;\n  }\n}\n\nasync function verifyDeployment() {\n  console.log('Starting deployment verification...\\n');\n  \n  const results = [];\n  \n  for (const test of tests) {\n    const result = await runTest(test);\n    results.push(result);\n    console.log(''); // Empty line for readability\n  }\n  \n  const passed = results.filter(r => r).length;\n  const total = results.length;\n  \n  console.log('==================================================');\n  console.log(`üìä Verification Results: ${passed}/${total} tests passed`);\n  \n  if (passed === total) {\n    console.log('üéâ All tests passed! Deployment is working correctly.');\n    console.log('\\n‚úÖ Your application is ready to use!');\n  } else {\n    console.log('‚ùå Some tests failed. Please check the issues above.');\n    console.log('\\nüìñ Refer to RAILWAY_DEPLOYMENT_GUIDE.md for troubleshooting.');\n  }\n  \n  console.log('==================================================');\n  \n  process.exit(passed === total ? 0 : 1);\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);\n  process.exit(1);\n});\n\n// Run verification\nverifyDeployment(); 